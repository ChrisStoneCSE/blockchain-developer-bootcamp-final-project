https://github.com/ChrisStoneCSE/blockchain-developer-bootcamp-final-project

Please answer the following questions. Does your project:

1. Follow this naming format: https://github.com/YOUR_GITHUB_USERNAME_HERE/blockchain-developer-bootcamp-final-project? YES

2. Contain a README.md file which describes the project, describes the directory structure, and where the frontend project can be accessed? YES/NO

And has your public Ethereum address if you'd like your certification as an NFT (optional)? YES

0x17Aa4c39d9B3996B2f7994da83E14c5ACB5f9d7b

3. Contain smart contract(s) which:
    --Are commented to the specs described by NatSpec Solidity documentation
    --Use at least two design patterns from the "Smart Contracts" section
    --Protect against two attack vectors from the "Smart Contracts" section with its the SWC number (Pragma and Pauseable: see https://swcregistry.io/docs/SWC-103)
    --Inherits from at least one library or interface (openzeppelin)
    --Can be easily compiled, migrated and tested? YES/NO

4. Contain a Markdown file named design_pattern_decisions.md and avoiding_common_attacks.md? YES/NO

5. Have at least five smart contract unit tests that pass? YES/NO

6. Contain a `deployed_address.txt` file which contains the testnet address and network where your contract(s) have been deployed? YES/NO

7. Have a frontend interface built with a framework like React or HTML/CSS/JS that:
--Detects the presence of MetaMask
--Connects to the current account
--Displays information from your smart contract
--Allows a user to submit a transaction to update smart contract state
--Updates the frontend if the transaction is successful or not? YES/NO

8. Hosted on Github Pages, Heroku, Netlify, Fleek, or some other free frontend service that gives users a public interface to your decentralized application? 
(That address should be in your README.md document) YES/NO

9. Have clear instructions for: 
    1) Installing dependencies for your project 
        // node.JS
        npm install @openzeppelin/contracts
        npm install -g truffle
        npm install --save-dev @truffle/hdwallet-provider
        npm install bip39 dotenv --save

    2) Accessing or—if your project needs a server (not required)—running your project

    3) Running your smart contract unit tests and which port a local testnet should be running on. YES/NO

10. A screencast of you walking through your project? YES/NO
